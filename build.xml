<?xml version="1.0" encoding="UTF-8"?>
<project name="orcid-api-client" default="describe" basedir=".">
	<!-- ====================================================================== 
	     Builds the orcid-api-client.
	     
	     Use the JAR file for just these classes, or the ZIP file which includes
	     the dependencies.
	     ====================================================================== -->

	<property name="schema.file" location="schema/orcid-message-1.0.23.xsd" />

	<property name="build.dir" location=".build" />
	<property name="src.generated.dir" location="${build.dir}/generated" />

	<!-- ================================= 
          target: describe              
         ================================= -->
	<target name="describe"
	        description="--> Describe the targets (this is the default).">
		<echo>
all        - Runs "clean", then "zip".
clean      - Delete all artifacts so the next build will be from scratch.
jar        - Compile all of the source code into a JAR file.
zip        - Include the JAR file and the dependency JARs into a ZIP file.
	    </echo>
	</target>

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="Delete all artifacts.">
		<delete dir="${build.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${src.generated.dir}" />
	</target>


	<target name="generate-sources" depends="prepare">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
			<classpath>
				<fileset dir="lib" includes="jaxb-xjc.jar" />
			</classpath>
		</taskdef>

		<xjc destdir="${src.generated.dir}"
		     extension="true"
		     schema="${schema.file}"
		     package="edu.cornell.mannlib.orcidclient.orcidmessage"
		     removeOldOutput="true">
			<arg line="-Xts:style:multiline" />
			<classpath>
				<fileset dir="lib">
					<include name="cxf-xjc-ts-2.6.2.jar" />
					<include name="jaxb-xjc.jar" />
					<include name="jaxb-core.jar" />
					<include name="jaxb-impl.jar" />
				</fileset>
			</classpath>
			<produces dir="${src.generated.dir}" />
		</xjc>
	</target>
</project>